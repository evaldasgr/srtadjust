#!/usr/bin/python3
import sys
import argparse

# Converts a .srt timecode (hh:mm:ss,ddd) to milliseconds
def timecodeToMs(timecode):
    # If the timecode is negative, remove the sign symbol so that the offsets
    # remain correct
    # Make note of the negative sign for calculations later
    sign = 1
    if timecode[0] == '-':
        sign = -1
        timecode = timecode[1:]

    # The hours should be a 2 digit number, but in case it isn't (if the
    # timecode is for >99 hours), find the position of the hour separator
    hs = timecode.find(":")

    h = int(timecode[0:hs])
    m = int(timecode[hs + 1:hs + 3])
    s = int(timecode[hs + 4:hs + 6])
    d = int(timecode[hs + 7:hs + 10])

    return ((h * 60 * 60 + m * 60 + s) * 1000 + d) * sign

# Converts milliseconds to a .srt timecode (hh:mm:ss,ddd)
def msToTimecode(ms):
    timecode = ""

    # Negative timecode will break the following calculation, so remember the
    # sign for the output and make the timecode positive
    if ms < 0:
        ms = -ms
        timecode = "-"

    h = (ms // 1000) // (60 * 60)
    m = ((ms // 1000) // 60) % 60
    s = (ms // 1000) % 60
    d = ms % 1000

    return timecode + str(h).zfill(2) + ":" + str(m).zfill(2) + ":" + \
        str(s).zfill(2) + "," + str(d).zfill(3)

if __name__ == "__main__":
    # Parse cmd-line arguments
    parser = argparse.ArgumentParser(description="Utility for offsetting .srt timecodes.")
    parser.add_argument("-i", "--input-file", help="input .srt file", required=True)
    parser.add_argument("-o", "--offset", help="offset timecode or ms", required=True)
    parser.add_argument("-f", "--offset-from", help="apply offset from this timecode or ms")
    parser.add_argument("-t", "--offset-to", help="apply offset up to this timecode or ms")
    parser.add_argument("output_file", help="output .srt file")
    args = parser.parse_args()

    # Convert timecodes to ms
    try:
        offsetMs = int(args.offset)
    except:
        offsetMs = msToTimecode(args.offset)

    fromMs = float("-inf")
    if args.offset_from:
        try:
            fromMs = int(args.offset_from)
        except:
            fromMs = timecodeToMs(args.offset_from)

    toMs = float("inf")
    if args.offset_to:
        try:
            toMs = int(args.offset_to)
        except:
            toMs = timecodeToMs(args.offset_to)

    # Open files
    try:
        inputFile = open(args.input_file, "r")
    except:
        sys.exit("Error: Could not open the input file")

    try:
        outputFile = open(args.output_file, "w")
    except:
        sys.exit("Error: Could not open the output file")

    # Loop until EOF for every subtitle in the input file
    while True:
        # Read the counter
        line = inputFile.readline()

        # Check for EOF
        if line == "":
            break

        # Write the counter
        outputFile.write(line)

        # Read, adjust and write the timecode
        line = inputFile.readline()

        b = timecodeToMs(line[0:line.find(" ")])
        e = timecodeToMs(line[line.rfind(" ") + 1:])
        
        # Apply the offset if within the desired range
        if b >= fromMs and b < toMs:
            b += offsetMs
        if e >= fromMs and e < toMs:
            e += offsetMs

        outputFile.write(msToTimecode(b) + " --> " + msToTimecode(e) + "\n")

        # Read and write all subtitle text lines
        while True:
            line = inputFile.readline()

            outputFile.write(line)

            # A blank line marks the end of the subtitle
            if line == "\n":
                break

            # Exit if EOF to avoid an infinite loop
            elif line == "":
                sys.exit(0)
